ml StdEnv/2020 python/3.11.2
source /filepath/env_name/bin/activate

python

import anndata as ad
import scanpy as sc
import numpy as np
import pandas as pd
import celltypist
from collections import Counter

# Load the single-cell data
adata = ad.read_h5ad('/filepath/raw_sc_data_24jul24.h5ad')

# Define PBMC cell types based on dataset's categories
pbmc_cell_types = [
    "B cells",
    "DC",
    "ILC",
    "Monocytes",
    "Mono-mac",
    "Plasma cells",
    "T cells",
    "pDC"
]

adata_pbmc = adata[adata.obs['cell_type_high'].isin(pbmc_cell_types)].copy()

# need to remove cells that only have 1 sample 
# Remove groups with only 1 cell to avoid spurious markers
group_counts = Counter(adata_pbmc.obs['cell_type_high'])
valid_groups = [group for group, count in group_counts.items() if count > 1]
adata_filtered = adata_pbmc[adata_pbmc.obs['cell_type_high'].isin(valid_groups)].copy()

adata_filtered.var.index = adata_filtered.var.gene_name

# (optional) if adata needs to be re-normalized
sc.pp.normalize_total(adata_filtered, target_sum=1e4)
sc.pp.log1p(adata_filtered)
adata_filtered.raw = adata_filtered

# Identify markers by cell type
# Run rank_genes_groups on the filtered dataset
sc.tl.rank_genes_groups(adata_filtered, 'cell_type_high', method='t-test')

# Get all group names
groups = adata_filtered.obs['cell_type_high'].unique()

# Create a dataframe for all groups
markers_list = [sc.get.rank_genes_groups_df(adata_filtered, group=grp) for grp in groups]
markers = pd.concat(markers_list, keys=groups, names=['group'])

markers.reset_index().to_csv("/filepath/sc_markers.csv", index=False)
